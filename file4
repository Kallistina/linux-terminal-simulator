














































                            {
                            }
                        {
                        {
                        }
                        }
                    {
                    {
                    {
                    {
                    {
                    {
                    {
                    {
                    {
                    }
                    }
                    }
                    }
                    }
                    }
                    }
                    }
                    }
                {
                {
                {
                {
                {
                {
                {
                {
                {
                {
                {
                {
                {
                {
                {
                {
                {
                {
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
                }
            {
            {
            {
            {
            {
            {
            {
            {
            {
            {
            {
            }
            }
            }
            }
            }
            }
            }
            }
            }
            }
            }
        //     {
        //     }
        // {
        // {
        // }
        // }
        //////////////////////////////////////////////////////////////////////////////////////////////
        {
        {
        {
        {
        {
        {
        {
        {
        {
        {
        {
        {
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
        }
    {
    }
{
{
{
}
}
}
                    aliases.erase(aliases.begin() + i);
        //         << aliases[i].aliasPath << endl;
            aliases.push_back(myAlias);
            alias myAlias;
                    argument.clear();
                    argument.clear();                    // clear to be prepared to read the next argument
                argument.push_back(command[i]);
                    argument.push_back(command[i]); // store it temporarily until the whole argument is read
        bool isAlias = 0;
        bool isHistory = 0;
                            bool to_be_insert_or_not_to_be = isMatch(fileName, wildArgument);
                        break;
                        break;
                        break;
                buff[0] = new char[parsedCommands[i].p_arguments[0].length() + 1];
                    buff[j] = new char[parsedCommands[i].p_arguments[j].length() + 1];
                buff[parsedCommands[i].p_arguments.size()] = NULL;
                    case 1:
                    case 1:
                    case 2:
                    case 2:
                    case 3:
                    case 3:
                char *buff[parsedCommands[i].p_arguments.size() + 1];
                        close(current_fd);
                        close(current_fd);
                        closedir(d);
                    close(fd[READ]);
                    close(fd[WRITE]);
                    close(fd[WRITE]);
                    close(filedes);
            command = aliases[printAlias].aliasPath;
            command = histories[histories.size() - printHistory];
        command.push_back(' '); // pushing a space at the back of the command. it will be useful when restore after parsing
                            continue;
                    continue;
                continue;
                continue;
            continue;
            continue;
            continue;
            continue;
        //     cout
        //     cout << aliases[i].aliasName << endl;
            //   cout << "command  " << command << endl;
        //     cout << "command  " << i << "ispipe  " << parsedCommands[i].isPipe << "isback   " << parsedCommands[i].isBack << endl;
    cout << endl;
    cout << endl;
                        cout << "history"
            cout << "in-mysh-now:>";
        //         cout << parsedCommands[i].p_arguments[j] << endl;
        //         cout << parsedCommands[i].p_files[j].myString << " ";
        //         cout << parsedCommands[i].p_files[j].myType << endl;
                    current_fd = fd[READ];
                    DIR *d;
                    d = opendir(".");
                        dup2(current_fd, STDIN_FILENO);
                    dup2(fd[WRITE], STDOUT_FILENO);
                        dup2(filedes, STDIN_FILENO);
                        dup2(filedes, STDOUT_FILENO);
                e = execv(buff[0], buff);
                else
            else
        else
        else
                    else               // case of expecting an output file
                else if (command[i] == '>')
            else if (command[i] != ' ' && command[i] != '>' && command[i] != '<' && command[i] != ';' && command[i] != '|') // case we dont read a special character
            else if (isAlias == 1)
        else if (parsedCommands[0].p_arguments[0] == "destroyalias" && parsedCommands[0].p_arguments.size() == 2)
                else if (!parsedCommands[i].isBack)
                else if (parsedCommands[i].p_arguments[0] == "myHistory" && parsedCommands[i].p_arguments.size() == 2)
                else if (parsedFile.myString.length() > 0) // the file is read
        else if (printHistory > -1)
            else // parent
                else                                // we' re expecting a file(input/output/cat)
                    exit(0);
                        exit(1);
                    exit(1);
                    flag = ARG; // we're going to expect an argument again
                        flag = CAT; // cat
                    flag = INPUT;      // input file
                        flag = OUTPUT; // output file
                        flags = O_CREAT | O_RDWR;
                        flags = O_CREAT | O_RDWR | O_APPEND;
            for (int i = 0; i < aliases.size(); i++)
        // for (int i = 0; i < aliases.size(); i++)
        for (int i = 0; i < command.length(); i++)
        // for (int i = 0; i < parsedCommands.size(); i++)
        for (int i = 0; i < parsedCommands.size(); i++)
        for (int i = 0; i < parsedCommands.size(); i++)
        for (int i = 0; i < parsedCommands.size(); i++)
                    for (int j = 0; j < aliases.size(); j++)
                    for (int j = 0; j < histories.size(); j++)
                for (int j = 0; j < parsedCommands[i].p_arguments.size(); j++)
            for (int j = 0; j < parsedCommands[i].p_arguments.size(); j++)
        //     for (int j = 0; j < parsedCommands[i].p_arguments.size(); j++)
                for (int j = 0; j < parsedCommands[i].p_files.size(); j++)
        //     for (int j = 0; j < parsedCommands[i].p_files.size(); j++)
            getline(cin, command); // getting the whole line of the command
                    global_pid = pid;
            histories.erase(histories.begin());
            histories.push_back(command);
                             << " " << histories.size() - j << " " << histories[j] << endl;
                if (aliases[i].aliasName == parsedCommands[0].p_arguments[1])
                        if (aliases[j].aliasName == parsedCommands[i].p_arguments[0] && parsedCommands[i].p_arguments.size() == 1)
                if (argument.length() > 0)
            if (command[i] == '"')
                    if (command[i + 1] == '>') // case of expecting an cat file
                if (command[i] == '<') // case of expecting an input file
            if (command[i] == '|' || command[i] == ';') // in case of a pipe restore all the arguments and files read by now and prepare for the next ones after the pipe
                    if (d)
                if (e == -1)
                    if ((filedes = open((parsedCommands[i].p_files[j].myString).c_str(), flags, 0644)) == -1)
                if (flag == ARG && argument.length() > 0) // the argument is read
                if (flag == ARG)                    // we're expecting an argument
        if (histories.size() == 21)
                if (i > 0)
                if (i > 0)
        if (isHistory == 0)
        if (parsedArguments.size() > 0)
        if (parsedCommands[0].p_arguments[0] == "createalias" && parsedCommands[0].p_arguments.size() == 3)
                if (parsedCommands[0].p_arguments[0] == "exit")
            if (parsedCommands[0].p_arguments.size() > 0)
                    if (parsedCommands[i - 1].isPipe)
                    if (parsedCommands[i - 1].isPipe)
                if (parsedCommands[i].isPipe)
                if (parsedCommands[i].isPipe)
            if (parsedCommands[i].isPipe)
                if (parsedCommands[i].p_arguments[0] == "myHistory" && parsedCommands[i].p_arguments.size() == 1)
            if (parsedCommands[i].p_arguments.size() > 0)
        if (parsedCommands.size() > 0)
            if (pid == 0) // child
            if ((pid = fork()) < 0)
                if (pipe(fd) == -1)
        if (printAlias > -1)
        if (printAlias > -1)
                            if (to_be_insert_or_not_to_be)
                if ((wildArgument.find('*') != string::npos) || (wildArgument.find('?') != string::npos))
#include "mysh.h"
        int current_fd = -1;
                int e = execv(buff[0], buff);
            int fd[2];
                    int filedes, flags;
        int flag = ARG; // 0: if we're expecting an argument, 1: input file, 2: output file, 3: cat file
int main(int argc, char *argv[])
    int printAlias = -1;
    int printHistory = -1;
                isAlias = !isAlias;
                        isHistory = 1;
                    isHistory = 1;
                        i++;        // we know the next char, we can pass it
                                j++;
    kill(global_pid, SIGINT);
    kill(global_pid, SIGTSTP);
            myAlias.aliasName = parsedCommands[0].p_arguments[1];
            myAlias.aliasPath = parsedCommands[0].p_arguments[2];
        myCommands parsedCommand;          // we restore currently every argument with its files(if there are any)
        myFiles parsedFile;                // struct to restore currently a file
                    parsedArguments.push_back(argument);
                    parsedArguments.push_back(argument); // store it with the other arguments
                parsedCommands[i].p_arguments[0] = "/usr/bin/" + parsedCommands[i].p_arguments[0];
                    parsedCommands[i].p_arguments.erase(parsedCommands[i].p_arguments.begin() + j);
                                parsedCommands[i].p_arguments.insert(parsedCommands[i].p_arguments.begin() + j, fileName);
                    parsedFile.myString.clear();
                    parsedFile.myString.push_back(command[i]); // store it
                    parsedFile.myType = flag;
                    parsedFiles.push_back(parsedFile);
                        perror("Cannot open redirection file");
                    perror("exec");
                perror(" fork failed ");
                    perror(" pipe ");
pid_t global_pid = -1;
            pid_t pid;
            printAlias = -1;
                            printAlias = j;
            printHistory = -1;
                    printHistory = atoi(parsedCommands[i].p_arguments[1].c_str());
        // /////////////////////////////////////////////PRINTTTTTTTTTTTT/////////////////////////////////////////
                // question a1, a2
    return 0;
            saveCommand(0, &parsedArguments, &parsedFiles, &parsedCommand, &parsedCommands);
                saveCommand(command[i] == '|', &parsedArguments, &parsedFiles, &parsedCommand, &parsedCommands);
    signal(SIGINT, controlC);
    signal(SIGINT, controlC);
    signal(SIGTSTP, controlZ);
    signal(SIGTSTP, controlZ);
                strcpy(buff[0], parsedCommands[i].p_arguments[0].c_str());
                    strcpy(buff[j], parsedCommands[i].p_arguments[j].c_str());
        string argument;                   // string to restore currently an argument
        string command;
                            string fileName = dir->d_name;
                string wildArgument = parsedCommands[i].p_arguments[j];
                    struct dirent *dir;
                    switch (parsedCommands[i].p_files[j].myType)
                    switch (parsedCommands[i].p_files[j].myType)
    vector<alias> aliases;
        vector<myCommands> parsedCommands; // we restore the whole command line parsed
        vector<myFiles> parsedFiles;       // vector to restore all the command files we read
    vector<string> histories;
        vector<string> parsedArguments;    // vector to restore all the command arguments we read
void controlC(int signum)
void controlZ(int signum)
                    waitpid(pid, NULL, 0);
                        while ((dir = readdir(d)) != NULL)
    while (INTERACTING)
